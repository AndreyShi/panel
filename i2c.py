import time
import math
from queue import Queue, Full 
from collections import deque
import threading
import random
from datetime import datetime
from threading import Event
from typing import List

try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π smbus2
    import smbus2
    print("‚úì –ù–∞—Å—Ç–æ—è—â–∏–π smbus2 –∑–∞–≥—Ä—É–∂–µ–Ω (Raspberry Pi)")
    class i2c:
        def __init__(self, bus_number=1):
            self.bus = smbus2.SMBus(bus_number)
            self.lock = threading.Lock()

        def read_adc(self, config, address):
            with self.lock:    # –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —à–∏–Ω–µ
                REG_CONVERSION = 0x00
                REG_CONFIG = 0x01                               
                config_bytes = [config >> 8, config & 0xFF]
                self.bus.write_i2c_block_data(address, REG_CONFIG, config_bytes)
                time.sleep(0.01)# –∂–¥–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ê–¶–ü
                result = self.bus.read_i2c_block_data(address, REG_CONVERSION, 2)
                value = (result[0] << 8) | result[1]
                return value    # —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —à–∏–Ω–µ, –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç –∫ —Ä–∞–±–æ—Ç–µ —Å —à–∏–Ω–æ–π
        def task_ADS1115(self, stop_event:Event, que:List[Queue]):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            OS = 1        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
            #MUX = 0b000  # AIN0 vs AIN1 (–¥–∏—Ñ—Ñ)
            #MUX = 0b001  # AIN0 vs AIN3 (–¥–∏—Ñ—Ñ)
            #MUX = 0b010  # AIN1 vs AIN3 (–¥–∏—Ñ—Ñ)
            #MUX = 0b011  # AIN2 vs AIN3 (–¥–∏—Ñ—Ñ)
            # Single-Ended —Ä–µ–∂–∏–º—ã:
            #MUX = 0b100  # AIN0 vs GND
            #MUX = 0b101  # AIN1 vs GND  
            #MUX = 0b110  # AIN2 vs GND
            #MUX = 0b111  # AIN3 vs GND
            MUX = 0b100   # AIN0 vs AIN1 
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —É—Å–∏–ª–µ–Ω–∏—è
            #PGA_6_144V = 0b000   # ¬±6.144V
            #PGA_4_096V = 0b001   # ¬±4.096V  
            #PGA_2_048V = 0b010   # ¬±2.048V (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            #PGA_1_024V = 0b011   # ¬±1.024V
            #PGA_0_512V = 0b100   # ¬±0.512V
            #PGA_0_256V = 0b101   # ¬±0.256V
            PGA = 0b010   # ¬±2.048V
            MODE = 1      # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            DR = 0b100    # 128 SPS
            COMP_MODE = 0 # –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä
            COMP_POL = 0  # –ê–∫—Ç–∏–≤–Ω—ã–π –Ω–∏–∑–∫–∏–π
            COMP_LAT = 0  # –ù–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å
            COMP_QUE = 0b11 # –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä                
            config = (OS << 15) | (MUX << 12) | (PGA << 9) | (MODE << 8) | (DR << 5) | (COMP_MODE << 4) | (COMP_POL << 3) | (COMP_LAT << 2) | COMP_QUE    
            # –æ—á–µ—Ä–µ–¥—å –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
            deq = deque(maxlen=5)

            while not stop_event.is_set():
                value = self.read_adc(config, 0x48)
                voltage = (value * 2.048) / 32767.0     # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
                R2 = 430 * (voltage / (3.3 - voltage))  # –†–∞—Å—Å—á–µ—Ç –ø–æ–¥—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ  —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤ —Å—Ö–µ–º–µ –¥–µ–ª–∏—Ç–µ–ª—è –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è
                deq.append(R2)
                R2_avg = sum(deq) / len(deq)
                #print(f"I2c value: {value}, voltage: {voltage:.3f}, R2: {R2:.3f}, R2_avg: {R2_avg:.3f}")
                if R2_avg >= 300:
                    R2_avg = 300
                elif R2_avg <= 0:
                     R2_avg = 0.2
                try:
                    que[0].put(R2_avg, timeout=1.0)                      #–µ—Å–ª–∏ —á—Ç–æ –∂–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø–æ—Ç–æ–º—É—á—Ç–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                except Full:
                    print(f"–û—á–µ—Ä–µ–¥—å que[0] –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ R2_avg: {R2_avg} –ø–æ—Ç–µ—Ä—è–Ω—ã") 
except ImportError:
    # –°–æ–∑–¥–∞–µ–º mock-–≤–µ—Ä—Å–∏—é smbus2
    class i2c:
        def __init__(self, bus_number=1):
            self.bus_number = bus_number
            self.devices = {}  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ I2C
            print(f"üñ• i2c: –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ {bus_number}")
        def task_ADS1115(self, stop_event:Event, que:List[Queue]):
            toup_R2 = True
            R2 = 1  
            while not stop_event.is_set():
                if toup_R2:  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                    R2 += 1 #random.uniform(0.0, 13.0)
                    if R2 >= 300:
                        R2 = 300
                        toup_R2 = False  # –¥–æ—Å—Ç–∏–≥–ª–∏ –≤–µ—Ä—Ö–∞ - –∏–¥–µ–º –≤–Ω–∏–∑
                else:        # –î–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑
                    R2 -= 1  #random.uniform(0.0, 3.0)
                    if R2 <= 0:
                        R2 = 0.2
                        toup_R2 = True   # –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–∏–∑–∞ - –∏–¥–µ–º –≤–≤–µ—Ä—Ö
                #print(f"R2:  {R2:.2f}")
                try:             
                    que[0].put(R2, timeout=1.0)
                except Full:
                    print(f"–û—á–µ—Ä–µ–¥—å que[0] –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –¥–∞–Ω–Ω—ã–µ R2: {R2} –ø–æ—Ç–µ—Ä—è–Ω—ã") 
                #print(f"put {R2:.3f} {datetime.now().strftime("%S.%f")[:-3]}")
                