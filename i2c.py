from typing import Optional, Callable

# –£—Å–ª–æ–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç smbus2 —Å –∑–∞–≥–ª—É—à–∫–æ–π
try:
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π smbus2
    import smbus2
    from smbus2 import SMBus
    import time
    HAS_REAL_HARDWARE = True
    print("‚úì –ù–∞—Å—Ç–æ—è—â–∏–π smbus2 –∑–∞–≥—Ä—É–∂–µ–Ω (Raspberry Pi)")
    class ADS1115:
        def __init__(self, bus_number=1, address=0x48):
            self.bus = SMBus(bus_number)
            self.address = address
            self.REG_CONVERSION = 0x00
            self.REG_CONFIG = 0x01
            
        def read_differential_a0_a1(self):
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            OS = 1        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
            #MUX = 0b000  # AIN0 vs AIN1 (–¥–∏—Ñ—Ñ)
            #MUX = 0b001  # AIN0 vs AIN3 (–¥–∏—Ñ—Ñ)
            #MUX = 0b010  # AIN1 vs AIN3 (–¥–∏—Ñ—Ñ)
            #MUX = 0b011  # AIN2 vs AIN3 (–¥–∏—Ñ—Ñ)
            # Single-Ended —Ä–µ–∂–∏–º—ã:
            #MUX = 0b100  # AIN0 vs GND
            #MUX = 0b101  # AIN1 vs GND  
            #MUX = 0b110  # AIN2 vs GND
            #MUX = 0b111  # AIN3 vs GND
            MUX = 0b100   # AIN0 vs AIN1 (–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π)
            PGA = 0b010   # ¬±2.048V
            MODE = 1      # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            DR = 0b100    # 128 SPS
            COMP_MODE = 0 # –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä
            COMP_POL = 0  # –ê–∫—Ç–∏–≤–Ω—ã–π –Ω–∏–∑–∫–∏–π
            COMP_LAT = 0  # –ù–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å
            COMP_QUE = 0b11 # –û—Ç–∫–ª—é—á–∏—Ç—å –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä
            
            config = (OS << 15) | (MUX << 12) | (PGA << 9) | (MODE << 8) | \
                    (DR << 5) | (COMP_MODE << 4) | (COMP_POL << 3) | \
                    (COMP_LAT << 2) | COMP_QUE
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_bytes = [config >> 8, config & 0xFF]
            self.bus.write_i2c_block_data(self.address, self.REG_CONFIG, config_bytes)
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            time.sleep(0.01)
            
            # –ß—Ç–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result = self.bus.read_i2c_block_data(self.address, self.REG_CONVERSION, 2)
            value = (result[0] << 8) | result[1]
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
            voltage = (value * 2.048) / 32767.0
            
            return value, voltage
    # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å ADS1115
    class ADS1115module:
        def SMBus(self, bus_number: int):
            return ADS1115(bus_number)
    smbus2 = ADS1115module()
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º
    HAS_REAL_HARDWARE = False
    print("‚ö† smbus2 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —ç–º—É–ª—è—Ü–∏—è")
    
    # –°–æ–∑–¥–∞–µ–º mock-–≤–µ—Ä—Å–∏—é smbus2
    class MockSMBus:
        def __init__(self, bus_number: int):
            self.bus_number = bus_number
            self.devices = {}  # –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ I2C
            print(f"üñ• MockSMBus: –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ {bus_number}")
        
        def write_byte_data(self, address: int, register: int, value: int):
            """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ"""
            device_key = f"dev_0x{address:02X}"
            if device_key not in self.devices:
                self.devices[device_key] = {}
            
            self.devices[device_key][register] = value
            print(f"üìù Mock –∑–∞–ø–∏—Å—å: –∞–¥—Ä–µ—Å 0x{address:02X}, —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:02X}, –∑–Ω–∞—á–µ–Ω–∏–µ 0x{value:02X}")
        
        def read_byte_data(self, address: int, register: int) -> int:
            """–ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
            device_key = f"dev_0x{address:02X}"
            value = self.devices.get(device_key, {}).get(register, 0x00)
            print(f"üìñ Mock —á—Ç–µ–Ω–∏–µ: –∞–¥—Ä–µ—Å 0x{address:02X}, —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:02X} ‚Üí 0x{value:02X}")
            return value
        
        def close(self):
            """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
            print("üîí MockSMBus: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

        def read_differential_a0_a1(self):
            return 7, 7
    
    # –°–æ–∑–¥–∞–µ–º mock-–º–æ–¥—É–ª—å smbus2
    class MockSMBusModule:
        def SMBus(self, bus_number: int):
            return MockSMBus(bus_number)
    
    smbus2 = MockSMBusModule()